AWSTemplateFormatVersion: '2010-09-09'
Description: 'Spree Commerce - Internet Facing ALB with CloudFront, Multi-AZ, Auto-Scaling'

Parameters:
  EnvironmentName:
    Type: String
    Default: spree-production
    Description: Environment name prefix

  DatabasePassword:
    Type: String
    NoEcho: true
    Description: Password for RDS PostgreSQL database
    MinLength: 8

  SecretKeyBase:
    Type: String
    NoEcho: true
    Description: Rails secret key base
    MinLength: 128

  DockerImageTag:
    Type: String
    Default: latest
    Description: Docker image tag to deploy

  DomainName:
    Type: String
    Description: Your custom domain name (e.g., mystore.com) - leave empty to skip
    Default: "doubleclick.systems"

  HostedZoneId:
    Type: String
    Description: Route 53 Hosted Zone ID - leave empty if not using custom domain
    Default: "Z033521913X4N9C48W9EH"

  CertificateArn:
    Type: String
    Description: ACM certificate ARN in us-east-1 (for CloudFront)

  AlertEmail:
    Type: String
    Description: Email address to receive CloudWatch alerts
    Default: "clwt1997@outlook.com"

  HighCPUThreshold:
    Type: Number
    Default: 80
    Description: CPU utilization threshold for alarms (percentage)

  HighMemoryThreshold:
    Type: Number
    Default: 85
    Description: Memory utilization threshold for alarms (percentage)

  HighErrorRateThreshold:
    Type: Number
    Default: 10
    Description: Number of 5xx errors per minute to trigger alarm

  DatabaseConnectionsThreshold:
    Type: Number
    Default: 80
    Description: Database connections threshold (percentage of max_connections)

Resources:
  # ==================== VPC and Networking ====================
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Subnets (for NAT Gateways only)
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-Subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-Subnet-2

  # Private Subnets (for ALB and ECS)
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.11.0/24
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-Subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.12.0/24
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-Subnet-2

  # Database Private Subnets (for RDS and Redis)
  DBPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.21.0/24
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DB-Private-Subnet-1

  DBPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.22.0/24
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DB-Private-Subnet-2

  # NAT Gateways
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT1-EIP

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT2-EIP

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT2

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-Routes-AZ1

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-Routes-AZ2

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  # Database Route Tables
  DBPrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DB-Private-Routes-AZ1

  DBPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref DBPrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  DBPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DBPrivateRouteTable1
      SubnetId: !Ref DBPrivateSubnet1

  DBPrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DB-Private-Routes-AZ2

  DBPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref DBPrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  DBPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DBPrivateRouteTable2
      SubnetId: !Ref DBPrivateSubnet2

  # S3 VPC Gateway Endpoint - Reduces NAT Gateway costs for S3 traffic
  # This is FREE and allows ECS tasks to reach S3 without going through NAT
  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2
        - !Ref DBPrivateRouteTable1
        - !Ref DBPrivateRouteTable2
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          # Allow ECR to access its S3 buckets for Docker image layers
          - Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
            Resource:
              - !Sub 'arn:aws:s3:::prod-${AWS::Region}-starport-layer-bucket/*'
          # Allow application to access Active Storage S3 bucket
          - Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
              - s3:ListBucket
              - s3:GetBucketLocation
            Resource:
              - !Sub ${S3Bucket.Arn}
              - !Sub ${S3Bucket.Arn}/*

  # VPC Endpoint Security Group - Allow HTTPS traffic for VPC endpoints
  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for VPC endpoints
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/16
          Description: Allow HTTPS from VPC CIDR
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPC-Endpoint-SG

  # ECR API VPC Endpoint - Required for ECS to pull images from ECR
  ECRApiVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.api
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  # ECR Docker VPC Endpoint - Required for ECS to pull Docker images
  ECRDockerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  # CloudWatch Logs VPC Endpoint - Required for ECS to send logs to CloudWatch
  CloudWatchLogsVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

# ==================== Security Groups ====================
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB (public access)
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ALB-SG

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ECS-SG

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS PostgreSQL
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ECSSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-RDS-SG

  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ElastiCache Redis
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref ECSSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Redis-SG

  # ==================== RDS Database with Read Replica ====================
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref DBPrivateSubnet1
        - !Ref DBPrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DB-Subnet-Group

  PostgresDB:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      DBInstanceIdentifier: !Sub ${EnvironmentName}-postgres
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: '16.6'
      MasterUsername: spreeadmin
      MasterUserPassword: !Ref DatabasePassword
      DBName: spree_production
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      PubliclyAccessible: false
      BackupRetentionPeriod: 7
      PreferredBackupWindow: '03:00-04:00'
      PreferredMaintenanceWindow: 'sun:04:00-sun:05:00'
      MultiAZ: true
      StorageEncrypted: true
      EnableCloudwatchLogsExports:
        - postgresql
      DeletionProtection: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PostgreSQL

  PostgresReadReplica:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      SourceDBInstanceIdentifier: !Ref PostgresDB
      DBInstanceClass: db.t3.micro
      PubliclyAccessible: false
      StorageEncrypted: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PostgreSQL-ReadReplica

  # ==================== ElastiCache Redis with Replication ====================
  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet group for Redis
      SubnetIds:
        - !Ref DBPrivateSubnet1
        - !Ref DBPrivateSubnet2

  RedisReplicationGroup:
    Type: AWS::ElastiCache::ReplicationGroup
    DeletionPolicy: Delete
    Properties:
      ReplicationGroupId: !Sub ${EnvironmentName}-redis
      ReplicationGroupDescription: Redis with automatic failover
      Engine: redis
      EngineVersion: '7.1'
      CacheNodeType: cache.t3.micro
      NumCacheClusters: 2
      AutomaticFailoverEnabled: true
      MultiAZEnabled: true
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      SecurityGroupIds:
        - !Ref RedisSecurityGroup
      AtRestEncryptionEnabled: true
      TransitEncryptionEnabled: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Redis

  # ==================== Secrets Manager ====================
  DatabaseURLSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${EnvironmentName}/database-url
      Description: Database connection URL
      SecretString: !Sub
        - 'postgresql://spreeadmin:${Password}@${Endpoint}:5432/spree_production'
        - Password: !Ref DatabasePassword
          Endpoint: !GetAtt PostgresDB.Endpoint.Address

  RedisURLSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${EnvironmentName}/redis-url
      Description: Redis connection URL
      SecretString: !Sub
        - 'redis://${Endpoint}:6379/0'
        - Endpoint: !GetAtt RedisReplicationGroup.PrimaryEndPoint.Address

  SecretKeyBaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${EnvironmentName}/secret-key-base
      Description: Rails secret key base
      SecretString: !Ref SecretKeyBase

  # ==================== S3 Bucket ====================
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${EnvironmentName}-spree-assets-${AWS::AccountId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3000
      LifecycleConfiguration:
        Rules:
          # Rule 1: Transition current objects to Intelligent-Tiering after 30 days
          # This saves costs on older product images that are less frequently accessed
          - Id: TransitionToIntelligentTiering
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: INTELLIGENT_TIERING
            # Only apply to objects larger than 128 KB (Intelligent-Tiering minimum)
            ObjectSizeGreaterThan: 131072

          # Rule 2: Delete old versions after 30 days to save storage costs
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30

          # Rule 3: Transition old versions to Intelligent-Tiering after 7 days
          # Old versions are rarely accessed but must be retained for 30 days
          - Id: TransitionOldVersionsToIntelligentTiering
            Status: Enabled
            NoncurrentVersionTransitions:
              - TransitionInDays: 7
                StorageClass: INTELLIGENT_TIERING
            ObjectSizeGreaterThan: 131072

          # Rule 4: Clean up incomplete multipart uploads after 7 days
          - Id: CleanupIncompleteUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7

      VersioningConfiguration:
        Status: Enabled

      # Enable Intelligent-Tiering Archive configurations
      IntelligentTieringConfigurations:
        - Id: EntireBucket
          Status: Enabled
          Tierings:
            # Move to Archive Access tier after 90 days of no access (saves 68% vs Standard)
            - Days: 90
              AccessTier: ARCHIVE_ACCESS
            # Move to Deep Archive Access tier after 180 days of no access (saves 95% vs Standard)
            - Days: 180
              AccessTier: DEEP_ARCHIVE_ACCESS

      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Assets
        - Key: CostOptimization
          Value: IntelligentTiering

  # ==================== ECR Repository ====================
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: spree-starter
      ImageScanningConfiguration:
        ScanOnPush: true
      EncryptionConfiguration:
        EncryptionType: AES256
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [{
              "rulePriority": 1,
              "description": "Keep last 10 images",
              "selection": {
                "tagStatus": "any",
                "countType": "imageCountMoreThan",
                "countNumber": 10
              },
              "action": { "type": "expire" }
            }]
          }
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ECR

  # ==================== IAM Roles ====================
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-ECSTaskExecutionRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref DatabaseURLSecret
                  - !Ref RedisURLSecret
                  - !Ref SecretKeyBaseSecret

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-ECSTaskRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub ${S3Bucket.Arn}/*
                  - !GetAtt S3Bucket.Arn

  # ==================== CloudWatch Logs ====================
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${EnvironmentName}
      RetentionInDays: 7

  # ==================== ECS Cluster ====================
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${EnvironmentName}-cluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
          Base: 1
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Cluster

# ==================== Application Load Balancer ====================
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-ALB
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ALB

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-TG
      Port: 3000
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckEnabled: true
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200-399
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
        - Key: stickiness.enabled
          Value: 'false'

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup


  # ==================== CloudFront Distribution ====================
  # Note: WAF WebACL for CloudFront must be created in us-east-1 in a separate stack
  # See aws/cloudformation/waf-cloudfront.yaml
  # After deploying WAF stack, manually associate it with CloudFront or use the deploy-waf.sh script
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: HasDomainName
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub ${EnvironmentName} Spree Commerce
        Aliases:
          - !Ref DomainName
          - !Sub 'www.${DomainName}'
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021

        # Cache Behaviors - Order matters! Most specific paths first
        CacheBehaviors:
          # Active Storage Direct Uploads (DO NOT cache, allow POST)
          - PathPattern: /rails/active_storage/direct_uploads
            TargetOriginId: vpc-alb-origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
            CachedMethods: [GET, HEAD, OPTIONS]
            Compress: false
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: all
              Headers:
                - '*'
            MinTTL: 0
            DefaultTTL: 0       # No caching for upload endpoint
            MaxTTL: 0

          # Static Assets: Product Images, Uploads (Cache 7 days)
          - PathPattern: /rails/active_storage/*
            TargetOriginId: vpc-alb-origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS]
            CachedMethods: [GET, HEAD, OPTIONS]
            Compress: true
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
              Headers:
                - Origin
                - Access-Control-Request-Method
                - Access-Control-Request-Headers
            MinTTL: 0
            DefaultTTL: 604800       # 7 days
            MaxTTL: 31536000          # 1 year

          # JavaScript and CSS Assets (Cache 30 days)
          - PathPattern: /assets/*
            TargetOriginId: vpc-alb-origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS]
            CachedMethods: [GET, HEAD, OPTIONS]
            Compress: true
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
              Headers:
                - Origin
            MinTTL: 0
            DefaultTTL: 2592000       # 30 days
            MaxTTL: 31536000          # 1 year

          # Spree Product Images (Cache 7 days)
          - PathPattern: /spree/*
            TargetOriginId: vpc-alb-origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS]
            CachedMethods: [GET, HEAD, OPTIONS]
            Compress: true
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
              Headers:
                - Origin
            MinTTL: 0
            DefaultTTL: 604800       # 7 days
            MaxTTL: 31536000         # 1 year

          # Product Pages (Cache 5 minutes, can be invalidated on updates)
          - PathPattern: /products/*
            TargetOriginId: vpc-alb-origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS]
            CachedMethods: [GET, HEAD, OPTIONS]
            Compress: true
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: whitelist
                WhitelistedNames:
                  - _spree_starter_session
              Headers:
                - Host
                - CloudFront-Forwarded-Proto
            MinTTL: 0
            DefaultTTL: 300          # 5 minutes
            MaxTTL: 3600             # 1 hour

          # Category/Taxon Pages (Cache 5 minutes)
          - PathPattern: /t/*
            TargetOriginId: vpc-alb-origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS]
            CachedMethods: [GET, HEAD, OPTIONS]
            Compress: true
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: whitelist
                WhitelistedNames:
                  - _spree_starter_session
              Headers:
                - Host
                - CloudFront-Forwarded-Proto
            MinTTL: 0
            DefaultTTL: 300          # 5 minutes
            MaxTTL: 3600             # 1 hour

        # Default Behavior: Dynamic content (cart, checkout, account, admin)
        DefaultCacheBehavior:
          TargetOriginId: vpc-alb-origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - PATCH
            - DELETE
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: all        # Forward all cookies for cart/checkout/auth
            Headers:
              - Host
              - X-Forwarded-Proto
              - X-Forwarded-For
              - CloudFront-Forwarded-Proto
              - Accept
              - Accept-Language
              - Authorization
              - User-Agent
              - X-CSRF-Token
              - X-Requested-With
              - Origin
              - Referer
          MinTTL: 0
          DefaultTTL: 0            # No caching for dynamic content
          MaxTTL: 0
          Compress: true

        Origins:
          - Id: vpc-alb-origin
            DomainName: !GetAtt ApplicationLoadBalancer.DNSName
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
              OriginSSLProtocols:
                - TLSv1.2
              OriginReadTimeout: 60
              OriginKeepaliveTimeout: 5

        # Custom Error Pages (optional - improves UX)
        CustomErrorResponses:
          - ErrorCode: 500
            ErrorCachingMinTTL: 0
          - ErrorCode: 502
            ErrorCachingMinTTL: 0
          - ErrorCode: 503
            ErrorCachingMinTTL: 0
          - ErrorCode: 504
            ErrorCachingMinTTL: 0

        PriceClass: PriceClass_100
        HttpVersion: http2and3
        IPV6Enabled: true

      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-CloudFront
        - Key: CacheEnabled
          Value: 'true'

  # ==================== Route 53 ====================
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: HasDomainAndZone
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt CloudFrontDistribution.DomainName

  WWWDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: HasDomainAndZone
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub 'www.${DomainName}'
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt CloudFrontDistribution.DomainName

  # ==================== ECS Task Definitions ====================
  WebTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-web
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: web
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}:${DockerImageTag}
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          Environment:
            - Name: RAILS_ENV
              Value: production
            - Name: RAILS_SERVE_STATIC_FILES
              Value: 'true'
            - Name: RAILS_LOG_TO_STDOUT
              Value: 'true'
            - Name: RAILS_FORCE_SSL
              Value: 'false'
            - Name: RACK_ENV
              Value: production
            - Name: S3_BUCKET_NAME
              Value: !Ref S3Bucket
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: HOST
              Value: !Ref DomainName
            - Name: RAILS_ASSET_HOST
              Value: !Sub https://${DomainName}
          Secrets:
            - Name: DATABASE_URL
              ValueFrom: !Ref DatabaseURLSecret
            - Name: REDIS_URL
              ValueFrom: !Ref RedisURLSecret
            - Name: SECRET_KEY_BASE
              ValueFrom: !Ref SecretKeyBaseSecret
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: web
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:3000/ || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60

  WorkerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-worker
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: worker
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}:${DockerImageTag}
          Command:
            - bundle
            - exec
            - sidekiq
          Environment:
            - Name: RAILS_ENV
              Value: production
            - Name: RAILS_LOG_TO_STDOUT
              Value: 'true'
            - Name: S3_BUCKET_NAME
              Value: !Ref S3Bucket
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: HOST
              Value: !Ref DomainName
          Secrets:
            - Name: DATABASE_URL
              ValueFrom: !Ref DatabaseURLSecret
            - Name: REDIS_URL
              ValueFrom: !Ref RedisURLSecret
            - Name: SECRET_KEY_BASE
              ValueFrom: !Ref SecretKeyBaseSecret
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: worker

  # ==================== ECS Services ====================
  WebService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      ServiceName: !Sub ${EnvironmentName}-web
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref WebTaskDefinition
      DesiredCount: 0
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref ECSSecurityGroup
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 3000
          TargetGroupArn: !Ref TargetGroup
      HealthCheckGracePeriodSeconds: 120
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true

  WorkerService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${EnvironmentName}-worker
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref WorkerTaskDefinition
      DesiredCount: 0
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref ECSSecurityGroup
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 0
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true

  # ==================== Auto Scaling ====================
  WebServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 2
      ResourceId: !Sub service/${ECSCluster}/${WebService.Name}
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  WebServiceScalingPolicyCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${EnvironmentName}-web-cpu-scaling
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref WebServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleInCooldown: 300
        ScaleOutCooldown: 60

  WebServiceScalingPolicyMemory:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${EnvironmentName}-web-memory-scaling
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref WebServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization
        TargetValue: 80.0
        ScaleInCooldown: 300
        ScaleOutCooldown: 60

  WebServiceScalingPolicyALB:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${EnvironmentName}-web-alb-requests
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref WebServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ALBRequestCountPerTarget
          ResourceLabel: !Sub
            - '${ALBFullName}/${TargetGroupFullName}'
            - ALBFullName: !GetAtt ApplicationLoadBalancer.LoadBalancerFullName
              TargetGroupFullName: !GetAtt TargetGroup.TargetGroupFullName
        TargetValue: 1000.0
        ScaleInCooldown: 300
        ScaleOutCooldown: 60

  WorkerServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 5
      MinCapacity: 1
      ResourceId: !Sub service/${ECSCluster}/${WorkerService.Name}
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  WorkerServiceScalingPolicyCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${EnvironmentName}-worker-cpu-scaling
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref WorkerServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleInCooldown: 300
        ScaleOutCooldown: 60

  # ==================== SNS Topic for Alerts ====================
  AlertTopic:
    Type: AWS::SNS::Topic
    Condition: HasAlertEmail
    Properties:
      TopicName: !Sub ${EnvironmentName}-alerts
      DisplayName: !Sub ${EnvironmentName} CloudWatch Alerts
      Subscription:
        - Endpoint: !Ref AlertEmail
          Protocol: email

  # ==================== CloudWatch Alarms ====================
  # ECS Web Service - High CPU
  WebServiceHighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: HasAlertEmail
    Properties:
      AlarmName: !Sub ${EnvironmentName}-web-high-cpu
      AlarmDescription: Alert when web service CPU exceeds threshold
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref HighCPUThreshold
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        - Name: ServiceName
          Value: !GetAtt WebService.Name
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching

  # ECS Web Service - High Memory
  WebServiceHighMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: HasAlertEmail
    Properties:
      AlarmName: !Sub ${EnvironmentName}-web-high-memory
      AlarmDescription: Alert when web service memory exceeds threshold
      MetricName: MemoryUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref HighMemoryThreshold
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        - Name: ServiceName
          Value: !GetAtt WebService.Name
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching

  # ECS Worker Service - High CPU
  WorkerServiceHighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: HasAlertEmail
    Properties:
      AlarmName: !Sub ${EnvironmentName}-worker-high-cpu
      AlarmDescription: Alert when worker service CPU exceeds threshold
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref HighCPUThreshold
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        - Name: ServiceName
          Value: !GetAtt WorkerService.Name
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching

  # ECS Worker Service - High Memory
  WorkerServiceHighMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: HasAlertEmail
    Properties:
      AlarmName: !Sub ${EnvironmentName}-worker-high-memory
      AlarmDescription: Alert when worker service memory exceeds threshold
      MetricName: MemoryUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref HighMemoryThreshold
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        - Name: ServiceName
          Value: !GetAtt WorkerService.Name
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching

  # ALB - High 5xx Error Rate
  ALBHigh5xxErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: HasAlertEmail
    Properties:
      AlarmName: !Sub ${EnvironmentName}-alb-high-5xx-errors
      AlarmDescription: Alert when ALB returns high number of 5xx errors
      MetricName: HTTPCode_Target_5XX_Count
      Namespace: AWS/ApplicationELB
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 2
      Threshold: !Ref HighErrorRateThreshold
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt ApplicationLoadBalancer.LoadBalancerFullName
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching

  # ALB - High ELB 5xx Error Rate
  ALBHighELB5xxErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: HasAlertEmail
    Properties:
      AlarmName: !Sub ${EnvironmentName}-alb-elb-5xx-errors
      AlarmDescription: Alert when ALB itself returns 5xx errors
      MetricName: HTTPCode_ELB_5XX_Count
      Namespace: AWS/ApplicationELB
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 2
      Threshold: !Ref HighErrorRateThreshold
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt ApplicationLoadBalancer.LoadBalancerFullName
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching

  # Target Group - Unhealthy Host Count
  TargetGroupUnhealthyHostAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: HasAlertEmail
    Properties:
      AlarmName: !Sub ${EnvironmentName}-unhealthy-hosts
      AlarmDescription: Alert when target group has unhealthy hosts
      MetricName: UnHealthyHostCount
      Namespace: AWS/ApplicationELB
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt ApplicationLoadBalancer.LoadBalancerFullName
        - Name: TargetGroup
          Value: !GetAtt TargetGroup.TargetGroupFullName
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching

  # RDS - High CPU
  RDSHighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: HasAlertEmail
    Properties:
      AlarmName: !Sub ${EnvironmentName}-rds-high-cpu
      AlarmDescription: Alert when RDS CPU exceeds threshold
      MetricName: CPUUtilization
      Namespace: AWS/RDS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref HighCPUThreshold
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !Ref PostgresDB
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching

  # RDS - High Database Connections
  RDSHighConnectionsAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: HasAlertEmail
    Properties:
      AlarmName: !Sub ${EnvironmentName}-rds-high-connections
      AlarmDescription: Alert when RDS database connections exceed threshold
      MetricName: DatabaseConnections
      Namespace: AWS/RDS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref DatabaseConnectionsThreshold
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !Ref PostgresDB
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching

  # RDS - Low Free Storage Space
  RDSLowStorageAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: HasAlertEmail
    Properties:
      AlarmName: !Sub ${EnvironmentName}-rds-low-storage
      AlarmDescription: Alert when RDS free storage space is low
      MetricName: FreeStorageSpace
      Namespace: AWS/RDS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 2147483648  # 2 GB in bytes
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !Ref PostgresDB
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching

  # RDS - High Read Latency
  RDSHighReadLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: HasAlertEmail
    Properties:
      AlarmName: !Sub ${EnvironmentName}-rds-high-read-latency
      AlarmDescription: Alert when RDS read latency is high
      MetricName: ReadLatency
      Namespace: AWS/RDS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 0.1  # 100ms
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !Ref PostgresDB
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching

  # RDS - High Write Latency
  RDSHighWriteLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: HasAlertEmail
    Properties:
      AlarmName: !Sub ${EnvironmentName}-rds-high-write-latency
      AlarmDescription: Alert when RDS write latency is high
      MetricName: WriteLatency
      Namespace: AWS/RDS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 0.1  # 100ms
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !Ref PostgresDB
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching

  # RDS Read Replica - High Lag
  RDSReplicaLagAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: HasAlertEmail
    Properties:
      AlarmName: !Sub ${EnvironmentName}-rds-replica-lag
      AlarmDescription: Alert when RDS read replica lag is high
      MetricName: ReplicaLag
      Namespace: AWS/RDS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 300  # 5 minutes in seconds
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !Ref PostgresReadReplica
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching

  # ElastiCache Redis - High CPU
  RedisHighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: HasAlertEmail
    Properties:
      AlarmName: !Sub ${EnvironmentName}-redis-high-cpu
      AlarmDescription: Alert when Redis CPU exceeds threshold
      MetricName: CPUUtilization
      Namespace: AWS/ElastiCache
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref HighCPUThreshold
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ReplicationGroupId
          Value: !Ref RedisReplicationGroup
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching

  # ElastiCache Redis - High Memory Usage
  RedisHighMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: HasAlertEmail
    Properties:
      AlarmName: !Sub ${EnvironmentName}-redis-high-memory
      AlarmDescription: Alert when Redis memory usage exceeds threshold
      MetricName: DatabaseMemoryUsagePercentage
      Namespace: AWS/ElastiCache
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref HighMemoryThreshold
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ReplicationGroupId
          Value: !Ref RedisReplicationGroup
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching

  # ElastiCache Redis - High Evictions
  RedisHighEvictionsAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: HasAlertEmail
    Properties:
      AlarmName: !Sub ${EnvironmentName}-redis-high-evictions
      AlarmDescription: Alert when Redis has high eviction rate
      MetricName: Evictions
      Namespace: AWS/ElastiCache
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 100
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ReplicationGroupId
          Value: !Ref RedisReplicationGroup
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching

  # ECS Service - Task Count (detect service issues)
  WebServiceLowTaskCountAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: HasAlertEmail
    Properties:
      AlarmName: !Sub ${EnvironmentName}-web-low-task-count
      AlarmDescription: Alert when web service has too few running tasks
      MetricName: RunningTaskCount
      Namespace: ECS/ContainerInsights
      Statistic: Average
      Period: 60
      EvaluationPeriods: 3
      Threshold: 1
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        - Name: ServiceName
          Value: !GetAtt WebService.Name
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: breaching

  # ALB - High Response Time
  ALBHighResponseTimeAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: HasAlertEmail
    Properties:
      AlarmName: !Sub ${EnvironmentName}-alb-high-response-time
      AlarmDescription: Alert when ALB target response time is high
      MetricName: TargetResponseTime
      Namespace: AWS/ApplicationELB
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 2  # 2 seconds
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt ApplicationLoadBalancer.LoadBalancerFullName
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching

# ==================== CloudWatch Dashboard ====================
  MonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub ${EnvironmentName}-dashboard
      DashboardBody: !Sub
        - |
          {
            "widgets": [
              {
                "type": "metric",
                "x": 0,
                "y": 0,
                "width": 12,
                "height": 6,
                "properties": {
                  "metrics": [
                    ["AWS/ECS", "CPUUtilization", "ClusterName", "${ClusterName}", "ServiceName", "${WebServiceName}"],
                    ["AWS/ECS", "MemoryUtilization", "ClusterName", "${ClusterName}", "ServiceName", "${WebServiceName}"]
                  ],
                  "view": "timeSeries",
                  "stacked": false,
                  "region": "${Region}",
                  "title": "Web Service - CPU & Memory",
                  "period": 300,
                  "stat": "Average",
                  "yAxis": {
                    "left": {
                      "min": 0,
                      "max": 100
                    }
                  }
                }
              },
              {
                "type": "metric",
                "x": 12,
                "y": 0,
                "width": 12,
                "height": 6,
                "properties": {
                  "metrics": [
                    ["AWS/ApplicationELB", "RequestCount", "LoadBalancer", "${ALBFullName}", {"stat": "Sum"}],
                    ["AWS/ApplicationELB", "TargetResponseTime", "LoadBalancer", "${ALBFullName}"]
                  ],
                  "view": "timeSeries",
                  "stacked": false,
                  "region": "${Region}",
                  "title": "ALB - Requests & Response Time",
                  "period": 300,
                  "stat": "Average"
                }
              },
              {
                "type": "metric",
                "x": 0,
                "y": 6,
                "width": 12,
                "height": 6,
                "properties": {
                  "metrics": [
                    ["AWS/ApplicationELB", "HTTPCode_Target_5XX_Count", "LoadBalancer", "${ALBFullName}"],
                    ["AWS/ApplicationELB", "HTTPCode_ELB_5XX_Count", "LoadBalancer", "${ALBFullName}"]
                  ],
                  "view": "timeSeries",
                  "stacked": false,
                  "region": "${Region}",
                  "title": "ALB - 5xx Errors",
                  "period": 300,
                  "stat": "Sum"
                }
              },
              {
                "type": "metric",
                "x": 12,
                "y": 6,
                "width": 12,
                "height": 6,
                "properties": {
                  "metrics": [
                    ["AWS/RDS", "CPUUtilization", "DBInstanceIdentifier", "${DBInstance}"],
                    ["AWS/RDS", "DatabaseConnections", "DBInstanceIdentifier", "${DBInstance}"]
                  ],
                  "view": "timeSeries",
                  "stacked": false,
                  "region": "${Region}",
                  "title": "RDS - CPU & Connections",
                  "period": 300,
                  "stat": "Average"
                }
              },
              {
                "type": "metric",
                "x": 0,
                "y": 12,
                "width": 12,
                "height": 6,
                "properties": {
                  "metrics": [
                    ["AWS/ElastiCache", "CPUUtilization", "ReplicationGroupId", "${RedisGroup}"],
                    ["AWS/ElastiCache", "DatabaseMemoryUsagePercentage", "ReplicationGroupId", "${RedisGroup}"]
                  ],
                  "view": "timeSeries",
                  "stacked": false,
                  "region": "${Region}",
                  "title": "Redis - CPU & Memory",
                  "period": 300,
                  "stat": "Average",
                  "yAxis": {
                    "left": {
                      "min": 0,
                      "max": 100
                    }
                  }
                }
              },
              {
                "type": "metric",
                "x": 12,
                "y": 12,
                "width": 12,
                "height": 6,
                "properties": {
                  "metrics": [
                    ["AWS/ECS", "CPUUtilization", "ClusterName", "${ClusterName}", "ServiceName", "${WorkerServiceName}"],
                    ["AWS/ECS", "MemoryUtilization", "ClusterName", "${ClusterName}", "ServiceName", "${WorkerServiceName}"]
                  ],
                  "view": "timeSeries",
                  "stacked": false,
                  "region": "${Region}",
                  "title": "Worker Service - CPU & Memory",
                  "period": 300,
                  "stat": "Average",
                  "yAxis": {
                    "left": {
                      "min": 0,
                      "max": 100
                    }
                  }
                }
              }
            ]
          }
        - ClusterName: !Ref ECSCluster
          WebServiceName: !GetAtt WebService.Name
          WorkerServiceName: !GetAtt WorkerService.Name
          ALBFullName: !GetAtt ApplicationLoadBalancer.LoadBalancerFullName
          DBInstance: !Ref PostgresDB
          RedisGroup: !Ref RedisReplicationGroup
          Region: !Ref AWS::Region

Conditions:
  HasDomainName: !Not [!Equals [!Ref DomainName, ""]]
  HasHostedZone: !Not [!Equals [!Ref HostedZoneId, ""]]
  HasDomainAndZone: !And
    - !Not [!Equals [!Ref DomainName, ""]]
    - !Not [!Equals [!Ref HostedZoneId, ""]]
  HasAlertEmail: !Not [!Equals [!Ref AlertEmail, ""]]

Outputs:
  PrivateALBArn:
    Description: ARN of the private ALB (use this to create VPC Origin in CloudFront Console)
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: !Sub ${AWS::StackName}-PrivateALBArn

  PrivateALBDNS:
    Description: DNS name of the private ALB
    Value: !GetAtt ApplicationLoadBalancer.DNSName

  ECSClusterName:
    Description: Name of the ECS cluster
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${AWS::StackName}-ECSClusterName

  ECRRepositoryURI:
    Description: URI of the ECR repository
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}
    Export:
      Name: !Sub ${AWS::StackName}-ECRRepositoryURI

  DatabaseEndpoint:
    Description: RDS primary database endpoint
    Value: !GetAtt PostgresDB.Endpoint.Address

  DatabaseReadReplicaEndpoint:
    Description: RDS read replica endpoint
    Value: !GetAtt PostgresReadReplica.Endpoint.Address

  RedisEndpoint:
    Description: Redis primary endpoint
    Value: !GetAtt RedisReplicationGroup.PrimaryEndPoint.Address

  S3BucketName:
    Description: S3 bucket for assets
    Value: !Ref S3Bucket

  CloudFrontDistributionId:
    Condition: HasDomainName
    Description: CloudFront Distribution ID
    Value: !Ref CloudFrontDistribution

  CloudFrontDomainName:
    Condition: HasDomainName
    Description: CloudFront domain name
    Value: !GetAtt CloudFrontDistribution.DomainName

  WebsiteURL:
    Condition: HasDomainName
    Description: Website URL
    Value: !Sub https://${DomainName}

  VPCId:
    Description: VPC ID
    Value: !Ref VPC

  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1

  PrivateSubnet2Id:
    Description: Private Subnet 2 ID (ECS)
    Value: !Ref PrivateSubnet2

  DBPrivateSubnet1Id:
    Description: Database Private Subnet 1 ID
    Value: !Ref DBPrivateSubnet1

  DBPrivateSubnet2Id:
    Description: Database Private Subnet 2 ID
    Value: !Ref DBPrivateSubnet2

  NATGateway1IP:
    Description: NAT Gateway 1 Elastic IP
    Value: !Ref NatGateway1EIP

  NATGateway2IP:
    Description: NAT Gateway 2 Elastic IP
    Value: !Ref NatGateway2EIP

  DashboardURL:
    Description: CloudWatch Dashboard URL
    Value: !Sub https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${EnvironmentName}-dashboard